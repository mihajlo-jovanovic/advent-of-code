(ns day14.core
  (:gen-class))

;; Part 1 functions
(defn floor [x y coll]
  (let [rocks (filter #(and (= x (first %)) (> (second %) y)) coll)]
    (if (empty? rocks)
      nil
      (dec (apply min (map second rocks))))))

(defn down-p1 [sand cave]
  (if (contains? cave (conj (pop sand) (inc (last sand))))
    sand
    (conj (pop sand) (floor (first sand) (second sand) cave))))

(defn left-p1 [sand cave]
  (let [x (dec (first sand))
        y (inc (second sand))
        lf (vector x y)]
    (if (contains? cave lf)
      sand
      lf)))

(defn right-p1 [sand cave]
  (let [x (inc (first sand))
        y (inc (second sand))
        r (vector x y)]
    (if (contains? cave r)
      sand
      r)))

;; Part 2 functions
(defn come-to-rest-p1 [sand cave]
  (let [new (down-p1 sand cave)]
    (if (nil? (second new))
      nil
      (if (= new sand)
        (let [l (left-p1 sand cave)]
          (if (= l sand)
            (let [r (right-p1 sand cave)]
              (if (= r sand)
                sand
                (come-to-rest-p1 r cave)))
            (come-to-rest-p1 l cave)))
        (come-to-rest-p1 new cave)))))

(defn down [sand cave max-y]
  (let [y (second sand)]
    (if (= (inc y) max-y)
      sand
      (let [new-pos (conj (pop sand) (inc y))]
        (if (contains? cave new-pos)
          sand
          new-pos)))))

(defn left [sand cave max-y]
  (let [y (second sand)]
    (if (= (inc y) max-y)
      sand
      (let [new-pos (vector (dec (first sand)) (inc y))]
        (if (contains? cave new-pos)
          sand
          new-pos)))))

(defn right [sand cave max-y]
  (let [y (second sand)]
    (if (= (inc y) max-y)
      sand
      (let [new-pos (vector (inc (first sand)) (inc y))]
        (if (contains? cave new-pos)
          sand
          new-pos)))))

(defn come-to-rest [sand cave max-y]
  (let [new (down sand cave max-y)]
    (if (= new sand)
      (let [l (left sand cave max-y)]
        (if (= l sand)
          (let [r (right sand cave max-y)]
            (if (= r sand)
              sand
              (come-to-rest r cave max-y)))
          (come-to-rest l cave max-y)))
      (come-to-rest new cave max-y))))

(defn p1 [cave]
  (let [n (come-to-rest-p1 [500 0] cave)]
    (if (nil? n)
      cave
      (recur (conj cave n)))))

(defn p2 [cave max-y]
  (let [n (come-to-rest [500 0] cave max-y)]
    (if (= n [500 0])
      cave
      (recur (conj cave n) max-y))))

(defn -main
  [& _]
  (let [input [[472, 47], [470, 100], [503, 119], [505, 128], [472, 101], [494, 85], [499, 63], [503, 63], [494, 34], [486, 79], [491, 85], [478, 100], [526, 153], [462, 101], [497, 70], [487, 79], [512, 134], [483, 115], [505, 66], [499, 34], [507, 34], [468, 44], [464, 101], [474, 110], [500, 16], [500, 122], [481, 88], [486, 34], [490, 115], [492, 76], [489, 119], [478, 88], [496, 88], [490, 82], [526, 168], [491, 28], [477, 47], [489, 28], [481, 117], [494, 28], [472, 41], [481, 47], [526, 170], [476, 110], [477, 110], [505, 130], [488, 91], [487, 119], [526, 166], [504, 59], [502, 16], [506, 59], [497, 91], [482, 91], [468, 97], [494, 91], [485, 91], [485, 79], [480, 39], [485, 47], [525, 171], [504, 22], [525, 147], [478, 104], [477, 104], [526, 167], [526, 159], [513, 59], [501, 56], [470, 46], [525, 149], [507, 51], [514, 132], [488, 119], [507, 59], [467, 104], [468, 38], [522, 171], [506, 70], [472, 42], [516, 59], [530, 159], [521, 147], [504, 122], [504, 20], [496, 66], [519, 149], [498, 70], [472, 100], [508, 66], [500, 34], [480, 34], [482, 40], [478, 46], [513, 165], [511, 52], [484, 46], [523, 146], [464, 104], [487, 30], [483, 47], [512, 53], [502, 53], [470, 104], [508, 122], [501, 32], [486, 43], [480, 91], [513, 127], [463, 104], [484, 45], [514, 130], [492, 32], [470, 102], [500, 18], [476, 104], [504, 53], [468, 101], [526, 169], [462, 104], [498, 121], [495, 70], [480, 47], [500, 70], [498, 122], [495, 23], [475, 104], [487, 115], [479, 91], [484, 79], [519, 143], [473, 104], [505, 122], [491, 115], [487, 88], [503, 34], [485, 82], [513, 137], [499, 62], [521, 141], [472, 104], [464, 98], [516, 58], [513, 53], [496, 70], [468, 98], [505, 134], [495, 88], [468, 39], [523, 150], [497, 34], [529, 156], [470, 40], [495, 67], [468, 47], [501, 23], [519, 144], [525, 144], [474, 100], [506, 127], [480, 41], [474, 43], [501, 70], [464, 100], [472, 45], [519, 165], [530, 156], [497, 28], [520, 171], [503, 32], [531, 156], [489, 76], [523, 143], [494, 88], [507, 127], [496, 21], [482, 43], [503, 122], [482, 82], [468, 45], [506, 53], [519, 164], [479, 110], [524, 153], [494, 30], [513, 125], [497, 117], [523, 165], [498, 21], [468, 42], [486, 91], [504, 66], [489, 32], [490, 117], [516, 56], [478, 47], [469, 104], [499, 122], [502, 119], [499, 66], [507, 53], [503, 23], [504, 17], [493, 26], [513, 171], [503, 65], [501, 34], [497, 88], [487, 76], [499, 23], [504, 70], [482, 32], [494, 26], [494, 115], [507, 125], [483, 82], [480, 38], [486, 46], [491, 82], [470, 101], [474, 102], [484, 42], [468, 43], [521, 148], [525, 156], [488, 113], [476, 45], [514, 137], [523, 144], [476, 47], [521, 145], [491, 88], [474, 47], [475, 110], [487, 91], [519, 147], [516, 57], [486, 32], [468, 46], [502, 19], [500, 17], [516, 53], [485, 88], [513, 170], [482, 45], [519, 137], [519, 148], [523, 145], [531, 159], [498, 32], [486, 39], [473, 110], [523, 171], [478, 102], [499, 119], [489, 88], [483, 34], [491, 91], [488, 30], [499, 76], [498, 30], [514, 163], [525, 165], [516, 54], [494, 23], [487, 85], [478, 103], [494, 76], [513, 169], [472, 110], [500, 15], [502, 18], [522, 165], [481, 85], [465, 104], [472, 44], [483, 88], [494, 22], [497, 32], [523, 147], [476, 98], [484, 117], [496, 22], [520, 150], [474, 101], [482, 88], [475, 91], [528, 159], [525, 159], [510, 134], [528, 156], [486, 44], [493, 91], [532, 159], [486, 30], [514, 53], [502, 21], [490, 28], [482, 47], [515, 53], [480, 110], [488, 79], [523, 142], [502, 122], [510, 66], [503, 64], [521, 143], [506, 134], [502, 23], [493, 85], [486, 115], [511, 59], [485, 119], [482, 44], [498, 23], [525, 145], [528, 153], [492, 30], [497, 30], [519, 142], [476, 96], [500, 32], [498, 76], [501, 30], [526, 165], [478, 98], [464, 102], [468, 103], [491, 119], [492, 117], [495, 117], [485, 117], [482, 46], [485, 110], [504, 18], [481, 119], [498, 117], [487, 110], [495, 32], [500, 30], [513, 166], [502, 13], [511, 50], [474, 44], [499, 91], [491, 76], [501, 55], [527, 153], [514, 164], [516, 137], [524, 171], [466, 102], [516, 171], [495, 68], [521, 146], [520, 159], [488, 88], [488, 117], [507, 66], [464, 99], [492, 119], [500, 19], [480, 43], [521, 165], [468, 41], [470, 98], [485, 34], [493, 34], [514, 133], [503, 70], [518, 171], [499, 64], [491, 117], [480, 45], [509, 122], [470, 99], [507, 126], [472, 109], [483, 32], [505, 132], [484, 43], [513, 168], [488, 110], [485, 32], [522, 159], [520, 137], [502, 14], [513, 126], [499, 70], [496, 19], [495, 28], [486, 41], [495, 115], [521, 159], [500, 23], [488, 76], [487, 113], [478, 91], [479, 88], [468, 102], [509, 66], [492, 34], [486, 38], [472, 91], [488, 32], [474, 91], [488, 82], [514, 165], [486, 110], [480, 119], [504, 34], [510, 59], [514, 59], [482, 110], [470, 43], [514, 171], [533, 159], [496, 18], [509, 59], [521, 144], [504, 16], [476, 97], [472, 99], [478, 85], [484, 44], [502, 59], [504, 19], [476, 102], [475, 88], [498, 34], [496, 117], [514, 134], [481, 91], [470, 41], [502, 22], [499, 117], [521, 150], [519, 146], [470, 38], [495, 119], [504, 23], [504, 32], [478, 110], [485, 85], [486, 47], [470, 96], [468, 40], [519, 171], [466, 104], [523, 156], [524, 150], [483, 110], [497, 23], [500, 14], [522, 150], [476, 88], [505, 34], [497, 76], [476, 103], [472, 43], [491, 34], [498, 22], [534, 159], [482, 34], [489, 113], [499, 65], [480, 40], [515, 171], [514, 162], [517, 171], [492, 115], [505, 59], [486, 45], [480, 44], [500, 22], [487, 34], [482, 85], [479, 119], [515, 137], [470, 37], [486, 40], [525, 142], [519, 163], [519, 140], [478, 101], [486, 85], [492, 85], [480, 85], [488, 34], [472, 103], [466, 103], [507, 70], [514, 128], [496, 28], [504, 21], [471, 104], [473, 91], [519, 162], [525, 146], [487, 82], [500, 119], [462, 102], [486, 119], [524, 165], [484, 85], [489, 30], [490, 76], [495, 66], [495, 69], [468, 37], [493, 76], [524, 159], [494, 119], [509, 121], [501, 119], [498, 66], [506, 66], [519, 141], [482, 42], [488, 109], [491, 30], [519, 145], [482, 41], [510, 69], [513, 167], [514, 127], [474, 46], [494, 117], [505, 131], [470, 103], [521, 171], [509, 134], [511, 53], [485, 30], [498, 20], [502, 15], [491, 32], [470, 45], [480, 37], [484, 82], [478, 97], [518, 137], [503, 59], [488, 115], [501, 58], [508, 59], [462, 99], [505, 129], [486, 42], [477, 88], [489, 117], [496, 119], [492, 28], [502, 17], [513, 134], [510, 67], [493, 30], [474, 103], [470, 42], [490, 32], [506, 122], [498, 28], [499, 75], [498, 119], [478, 45], [519, 150], [501, 59], [501, 54], [501, 53], [477, 119], [496, 20], [472, 46], [505, 133], [502, 32], [499, 30], [476, 91], [483, 117], [521, 140], [525, 148], [507, 52], [474, 45], [480, 117], [502, 20], [525, 150], [500, 20], [514, 129], [478, 119], [479, 34], [501, 57], [481, 110], [462, 103], [500, 91], [497, 66], [511, 51], [484, 88], [496, 17], [523, 141], [470, 44], [496, 23], [474, 42], [504, 15], [506, 34], [493, 119], [516, 55], [492, 26], [470, 39], [476, 101], [484, 115], [495, 30], [484, 119], [484, 91], [510, 68], [482, 119], [489, 82], [480, 46], [462, 100], [464, 103], [480, 42], [498, 91], [469, 47], [491, 26], [503, 66], [496, 91], [490, 91], [496, 76], [522, 137], [508, 70], [493, 115], [475, 47], [479, 85], [471, 47], [494, 32], [509, 70], [468, 100], [487, 117], [481, 34], [489, 34], [490, 85], [490, 88], [505, 127], [503, 53], [512, 137], [507, 122], [485, 115], [524, 156], [517, 137], [526, 171], [495, 34], [505, 70], [518, 159], [523, 149], [508, 134], [474, 104], [492, 91], [521, 149], [505, 53], [479, 47], [486, 113], [512, 59], [507, 50], [521, 156], [510, 70], [488, 85], [470, 97], [491, 113], [496, 32], [468, 99], [511, 134], [501, 122], [490, 113], [472, 102], [481, 82], [519, 159], [468, 104], [474, 39], [487, 75], [476, 100], [521, 142], [495, 26], [484, 47], [476, 44], [502, 70], [488, 28], [495, 76], [484, 32], [520, 165], [503, 62], [474, 41], [473, 47], [514, 131], [476, 46], [493, 88], [527, 156], [523, 148], [522, 156], [521, 137], [478, 99], [470, 47], [527, 159], [525, 143], [507, 134], [484, 110], [525, 153], [474, 40], [515, 59], [476, 99], [482, 117], [500, 21]]
        cave (into (hash-set) input)
        max-y (+ 2 (apply max (map second cave)))]
    (println "Part 1 solution: " (- (count (p1 cave)) (count cave)))
    (println "Part 2 solution: " (inc (- (count (p2 cave max-y)) (count cave))))))