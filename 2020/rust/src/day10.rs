#[aoc_generator(day10)]
fn generator_input(input: &str) -> Vec<u32> {
    input.lines().map(|l| l.parse::<u32>().unwrap()).collect()
}

#[aoc(day10, part1)]
fn part1(input: &[u32]) -> usize {
    let max: u32 = *input.iter().max().unwrap();
    let threes = (input.len() * 3 - max as usize) / 2;
    threes * (input.len() - threes + 1)
}

#[aoc(day10, part2)]
fn part2(input: &[u32]) -> u64 {
    let mut new = input.to_owned();
    new.push(input.iter().max().unwrap() + 3);
    new.sort_unstable();

    let mut diffs: Vec<u32> = Vec::new();
    let mut prev: u32 = 0;
    for i in &new {
        diffs.push(i - prev);
        prev = *i;
    }
    let mut res: Vec<u32> = Vec::new();
    let mut cnt: u32 = 0;
    for i in &diffs {
        if i == &1 {
            cnt += 1;
        } else {
            res.push(cnt);
            cnt = 0;
        }
    }
    res.iter()
        .map(|n| match n {
            4 => 7,
            3 => 4,
            2 => 2,
            _ => 1,
        })
        .product()
}

#[test]
fn test_part1() {
    assert_eq!(
        2482,
        part1(&[
            66, 7, 73, 162, 62, 165, 157, 158, 137, 125, 138, 59, 36, 40, 94, 95, 13, 35, 136, 96,
            156, 155, 24, 84, 42, 171, 142, 3, 104, 149, 83, 129, 19, 122, 68, 103, 74, 118, 20,
            110, 54, 127, 88, 31, 135, 26, 126, 2, 51, 91, 16, 65, 128, 119, 67, 48, 111, 29, 49,
            12, 132, 17, 41, 166, 75, 146, 50, 30, 1, 164, 112, 34, 18, 72, 97, 145, 11, 117, 58,
            78, 152, 90, 172, 163, 89, 107, 45, 37, 79, 159, 141, 105, 10, 115, 69, 170, 25, 100,
            80, 4, 85, 169, 106, 57, 116, 23
        ])
    );
}

#[test]
fn test_part2() {
    assert_eq!(
        96717311574016,
        part2(&[
            66, 7, 73, 162, 62, 165, 157, 158, 137, 125, 138, 59, 36, 40, 94, 95, 13, 35, 136, 96,
            156, 155, 24, 84, 42, 171, 142, 3, 104, 149, 83, 129, 19, 122, 68, 103, 74, 118, 20,
            110, 54, 127, 88, 31, 135, 26, 126, 2, 51, 91, 16, 65, 128, 119, 67, 48, 111, 29, 49,
            12, 132, 17, 41, 166, 75, 146, 50, 30, 1, 164, 112, 34, 18, 72, 97, 145, 11, 117, 58,
            78, 152, 90, 172, 163, 89, 107, 45, 37, 79, 159, 141, 105, 10, 115, 69, 170, 25, 100,
            80, 4, 85, 169, 106, 57, 116, 23
        ])
    );
    assert_eq!(8, part2(&[16, 10, 15, 5, 1, 11, 7, 19, 6, 12, 4]));
    assert_eq!(
        19208,
        part2(&[
            28, 33, 18, 42, 31, 14, 46, 20, 48, 47, 24, 23, 49, 45, 19, 38, 39, 11, 1, 32, 25, 35,
            8, 17, 7, 9, 4, 2, 34, 10, 3, 52
        ])
    )
}
